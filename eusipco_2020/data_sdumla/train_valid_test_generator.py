"""
This code is generated by Ridvan Salih KUZU @UNIROMA3
LAST EDITED:  02.03.2020
ABOUT SCRIPT:
It is a script for generating the CSV files for train/validation/test partitions from SDUMLA database images.
It only divide the first half of the database for testing and second half of it for training/validation.
The both partitions are generated in classification mode (without pairing for verification).
"""

import argparse
import glob
import pandas as pd

parser = argparse.ArgumentParser(description='Database Partition Generator')

parser.add_argument('--database-dir', default='../data_sdumla/Database', type=str,
                    help='path to the database root directory')
parser.add_argument('--train-val-outdir', default='../CSVFiles/output_list_train_val.csv', type=str,
                    help='path to the CSV output file including the list of train/validation partitions')
parser.add_argument('--test-outdir', default='../CSVFiles/output_list_test.csv', type=str,
                    help='path to the CSV output file including the list of test partition')

args = parser.parse_args()

def main():

    create_CSV_for_train_valid_test(args.database_dir,args.train_val_outdir,args.test_outdir)

def create_CSV_for_train_valid_test(database_root_dir,output_list_train_valid, output_list_test):
    """It generates the list of train/validation/test partitions in a given dataset (SDUMLA here):
           Args:
               DATABASE_ROOT_DIR: Main directory for the Database (SDUMLA in this case).
               OUTPUT_LIST_TRAIN_VALID: The output CSV file to write the generated train and valid file
                                        list for later feature extraction or training from the list.
               OUTPUT_LIST_TEST: The output CSV file to write the generated test file list
                                 for later feature extraction or training from the list.
        """
    file_left = glob.glob(database_root_dir+"/*/left/")
    file_right = glob.glob(database_root_dir+"/*/right/")

    df_train = pd.DataFrame()
    df_test = pd.DataFrame()

    counter = 0
    for X1, X2 in zip(file_left[0:53], file_right[0:53]):
        filx11 = glob.glob(X1 + "/index*")
        filx12 = glob.glob(X1 + "/middle*")
        filx13 = glob.glob(X1 + "/ring*")

        filx21 = glob.glob(X2 + "/index*")
        filx22 = glob.glob(X2 + "/middle*")
        filx23 = glob.glob(X2 + "/ring*")

        for fx11, fx12, fx13, fx21, fx22, fx23 in zip(filx11, filx12, filx13, filx21, filx22, filx23):

            df_test = df_test.append({'idx': fx11, 'class': int(counter)}, ignore_index=True)
            df_test = df_test.append({'idx': fx12, 'class': int(counter+1)}, ignore_index=True)
            df_test = df_test.append({'idx': fx13, 'class': int(counter+2)}, ignore_index=True)
            df_test = df_test.append({'idx': fx21, 'class': int(counter)+3}, ignore_index=True)
            df_test = df_test.append({'idx': fx22, 'class': int(counter)+4}, ignore_index=True)
            df_test = df_test.append({'idx': fx23, 'class': int(counter)+5}, ignore_index=True)
        counter += 6
    df_test = df_test.sort_values(by=['class']).reset_index(drop=True)
    df_test.to_csv(output_list_test, index=False)

    for X1, X2 in zip(file_left[53:106], file_right[53:106]):
        filx11 = glob.glob(X1 + "/index*")
        filx12 = glob.glob(X1 + "/middle*")
        filx13 = glob.glob(X1 + "/ring*")

        filx21 = glob.glob(X2 + "/index*")
        filx22 = glob.glob(X2 + "/middle*")
        filx23 = glob.glob(X2 + "/ring*")

        for fx11, fx12, fx13, fx21, fx22, fx23 in zip(filx11, filx12, filx13, filx21, filx22, filx23):

            df_train = df_train.append({'idx': fx11, 'class': int(counter)}, ignore_index=True)
            df_train = df_train.append({'idx': fx12, 'class': int(counter+1)}, ignore_index=True)
            df_train = df_train.append({'idx': fx13, 'class': int(counter+2)}, ignore_index=True)
            df_train = df_train.append({'idx': fx21, 'class': int(counter)+3}, ignore_index=True)
            df_train = df_train.append({'idx': fx22, 'class': int(counter)+4}, ignore_index=True)
            df_train = df_train.append({'idx': fx23, 'class': int(counter)+5}, ignore_index=True)
        counter += 6
    df_train = df_train.sort_values(by=['class']).reset_index(drop=True)
    df_train.to_csv(output_list_train_valid, index=False)




if __name__ == '__main__':
    main()