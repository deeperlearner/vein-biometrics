"""
This code is generated by Ridvan Salih KUZU @UNIROMA3
LAST EDITED:  02.03.2020
ABOUT SCRIPT:
It is a script for normalized softmax calculation based on the paper https://arxiv.org/abs/1811.12649
The reference code is taken from https://github.com/azgo14/classification_metric_learning.
"""
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.nn import Parameter
import math

class NormSoftmax(nn.Module):
    """
    L2 normalize weights and apply temperature scaling on logits.
    """
    def __init__(self,
                 dim,
                 num_instances,
                 scale=0.25):
        super(NormSoftmax, self).__init__()

        self.weight = Parameter(torch.Tensor(num_instances, dim))
        stdv = 1. / math.sqrt(self.weight.size(1))
        self.weight.data.uniform_(-stdv, stdv)

        self.scale = scale

    def forward(self, embeddings, instance_targets):
        norm_weight = nn.functional.normalize(self.weight, dim=1)
        prediction_logits = nn.functional.linear(embeddings, norm_weight)
        return prediction_logits/self.scale