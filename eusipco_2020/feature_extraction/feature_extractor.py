"""
This code is generated by Ridvan Salih KUZU @UNIROMA3
LAST EDITED:  02.03.2020
ABOUT SCRIPT:
It is a script for extracting the features of images into a seperate files in a given directory.
"""

import argparse
from models import DenseNet161_Modified as densenet
from benchmark_verification import get_instance_data_loader
from torch.nn import CrossEntropyLoss
import torch
import pandas as pd
from pathlib import Path

parser = argparse.ArgumentParser(description='Vein Verification')

parser.add_argument('-i','--image-dir', default='index_5.bmp', type=str,
                    help='path to the input image folder or image file')
parser.add_argument('-o','--out-dir', default='index_5.dat', type=str,
                    help='path to the output image folder or image file')
parser.add_argument('-m','--model-dir', default='modeldir', type=str,
                    help='Reference Model Directory (default: model)')
parser.add_argument('--embedding-size', default=2048, type=int, metavar='ES',
                    help='embedding size (default: 1024)')

args = parser.parse_args()

def main():

    extract_features(args.image_dir,args.out_dir, args.model_dir)


def extract_features(image_dir,out_dir,model_dir):
    if not Path(model_dir).is_dir():
        ex_message = 'Model directory should be a folder, not a path of the model file!!'
        raise Exception(ex_message)

    data_loader = get_instance_data_loader(image_dir)

    model = densenet(embedding_size=args.embedding_size, pretrained=True)
    model = torch.nn.DataParallel(model, device_ids=[0]).cuda()
    checkpoint = torch.load(model_dir + '/test_model_best.pth.tar')
    model.load_state_dict(checkpoint['state_dict'])

    with torch.set_grad_enabled(False):
        model.eval()
        for index, (data, file_name) in enumerate(data_loader):
            output = model(data,False)
            for f,o in zip(file_name,output):
                extracted_features = pd.Series(o.data.cpu().numpy())
                if Path(out_dir).is_dir():
                    out_file=out_dir + '/' + Path(f).stem +'.dat'
                else:
                    out_file=out_dir
                if out_file==f:
                    ex_message = 'Input file name "{}" and output file name "{}" are equal!!'.format(f,out_file)
                    raise Exception(ex_message)
                extracted_features.to_csv(out_file, index=False)
                print('Feature extraction is completed for file: {}'.format(Path(f).name))

if __name__ == '__main__':
    main()